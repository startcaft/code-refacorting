运用多态取代条件逻辑运算。
1：Rental_Refacoting02#getCharge方法中的switch语句有问题；
	最好不要在另外一个对象的属性基础上使用switch语句。
	如果不得不使用switch语句，那么也应该在自己对象的数据上使用。
	所以getCharge可以移动到Movie类中。
2：Rental_Refacoting02#getFrequentRenterPoints也是一样的问题；

3：用多态来取代switch的分支，并且将Moview的PriceCode抽象成一个Price抽象类，其中定义获取PriceCode的函数，
	定义获取费用的函数，定义获取积分的函数。
	然后Movie类中持有一个Price类的引用，在setPriceCode(int arg)方法中，根据不同的参数值，生成不同的Price的子类。
	然后Moview中的获取费用的函数，直接调用子类Price中的获取费用的函数的方法。
	获取积分的方法也是一样的处理。
	【这就有点State模式，对象状态模式的味道了】
	