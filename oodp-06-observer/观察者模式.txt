观察者（observer）模式是 对象的行为模式，又叫作发布-订阅（Publish/Subscribe）模式，
模型-视图（Model/View）模式，源-监听器（Source/Listener）模式或从属者（Dependents）模式。

观察者模式 定义了一种 一对多 的依赖关系，让 多个观察者对象 同时监听 某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。

观察者模式的实现有以下角色：
1，抽象主题（Subject）角色
	主题角色把所有观察者对象的引用保存在一个集合中。抽象主题提供一个接口，可以增加和删除观察者对象。
	
2，抽象观察者（Observer）角色
	为所有的具体观察者定义一个接口，在得到主题的通知时更新自己。一般只包含一个方法（即 update() 方法）
	
3，具体主题（ConcreteSubject）角色
	将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。

4，具体观察者（ConcreteObserver）角色
	具体观察者角色保存一个指向具体主题的引用。

	
在java.util包里面，提供了一个 Observable 类和一个 Observer 接口，构成java语言对观察者模式的支持。
java.util.Observer 接口只定义了一个 update() 方法。该类标识观察者对象
java.util.Observable 类的子类都是 主题对象，有两个方法很重要：
	setChanged()------被调用之后会设置一个内部标记变量，代表 主题对象 的状态发生了改变。
	notifyObservers()------被调用后所有登记过的观察者对象的 update() 都被调用。

java.util.observable 类还有一些重要的方法，可以自己查看API